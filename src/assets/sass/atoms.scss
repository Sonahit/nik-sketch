@for $h from 1 through 10 {
    .h-#{$h} {
        height: percent($h * 10);
    }
}

@for $rotation from 0 through 36 {
    .rotate-#{$rotation * 10} {
        transform: rotate(#{$rotation * 10}deg);
    }
}

@for $width-vw from 1 through 10 {
    .width-view-#{$width-vw} {
        width: #{$width-vw * 10}vw;
    }
}

@for $height-vh from 1 through 10 {
    .height-view-#{$height-vh} {
        height: #{$height-vh * 10}vh;
    }
}

@for $width-px from 1 to 50 {
    .width-px-#{$width-px * 10} {
        width: #{$width-px * 10}px;
    }
}

@for $height-px from 1 to 50 {
    .height-px-#{$height-px * 10} {
        height: #{$height-px * 10}px;
    }
}

@for $width-per from 1 to 50 {
    .width-per-#{$width-per * 10} {
        // number * 10 / 100
        $width: percentage($width-per / 10);
        width: $width;
    }
}

@for $height-per from 1 to 10 {
    .height-per-#{$height-per * 10} {
        // number * 10 / 100
        $height: percentage($height-per / 10);
        height: $height;
    }
}

@for $padding from 1 to 10 {
    .p-l-#{$padding * 10} {
        padding-left: #{$padding * 10}px;
    }
}

@for $padding from 1 to 10 {
    .p-r-#{$padding * 10} {
        padding-right: #{$padding * 10}px;
    }
}

@for $padding from 1 to 10 {
    .p-t-#{$padding * 10} {
        padding-top: #{$padding * 10}px;
    }
}

@for $padding from 1 to 10 {
    .p-b-#{$padding * 10} {
        padding-bottom: #{$padding * 10}px;
    }
}

$RECTANGLE_COLORS: white, black;

$RECTANGLE_HEIGHT: 15px;
$RECTANGLE_BORDER_WIDTH: 2px;
@each $color in $RECTANGLE_COLORS {
    .rectangle-#{$color} {
        @include rectangle($RECTANGLE_HEIGHT, $RECTANGLE_BORDER_WIDTH, $color);
        margin: 0 20px;
        cursor: pointer;
        @media screen and (max-width: 1300px) {
            margin: 0 10px;
        }
        @media screen and (max-width: 1100px) {
            margin: 0 5px;
        }
        @media screen and (max-width: 600px) {
            margin: 5px 5px;
        }
        @media screen and (max-width: 400px) {
            margin: 5px 0px;
        }
    }
}

$CIRCLE_HEIGHT: 10px;

@each $color in $RECTANGLE_COLORS {
    .circle-#{$color} {
        @include circle($CIRCLE_HEIGHT, $color);
        margin: 0 20px;
        background-color: $color;
        cursor: pointer;
        &.is-active {
            background-color: initial;
        }
    }
}

.line {
    border-top: 1px solid black;
    padding: 0 20%;
    margin-left: 10px;
    @media screen and (max-width: 1000px) {
        padding: 0 20%;
    }
    @media screen and (max-width: 800px) {
        padding: 0 10%;
    }
    @media screen and (max-width: 600px) {
        display: none;
    }
    &-white {
        border-top-color: white;
    }
}

$LINE_COLORS: black, white;

$LINE_THICKNESS: thick, thin, medium, initial, inherit;

@each $thickness in $LINE_THICKNESS {
    .line-#{$thickness} {
        border-top-width: $thickness;
    }
}

@each $color in $LINE_COLORS {
    .line-#{$color} {
        border-top-color: $color;
    }
}
.sticky {
    position: sticky;
    top: 0;
}

.toupper {
    text-transform: uppercase;
}

.tolower {
    text-transform: lowercase;
}

.bg-black {
    background-color: black;
}

.bg-white {
    background-color: white;
}

.cards {
    display: flex;
    flex-direction: row;
    justify-content: space-around;

}
